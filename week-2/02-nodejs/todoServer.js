// /**
//   You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
//   - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
//   - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

//   Each todo has a title and a description. The title is a string and the description is a string.
//   Each todo should also get an unique autogenerated id every time it is created
//   The expected API endpoints are defined below,
//   1.GET /todos - Retrieve all todo items
//     Description: Returns a list of all todo items.
//     Response: 200 OK with an array of todo items in JSON format.
//     Example: GET http://localhost:3000/todos
    
//   2.GET /todos/:id - Retrieve a specific todo item by ID
//     Description: Returns a specific todo item identified by its ID.
//     Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
//     Example: GET http://localhost:3000/todos/123
    
//   3. POST /todos - Create a new todo item
//     Description: Creates a new todo item.
//     Request Body: JSON object representing the todo item.
//     Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
//     Example: POST http://localhost:3000/todos
//     Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
//   4. PUT /todos/:id - Update an existing todo item by ID
//     Description: Updates an existing todo item identified by its ID.
//     Request Body: JSON object representing the updated todo item.
//     Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
//     Example: PUT http://localhost:3000/todos/123
//     Request Body: { "title": "Buy groceries", "completed": true }
    
//   5. DELETE /todos/:id - Delete a todo item by ID
//     Description: Deletes a todo item identified by its ID.
//     Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
//     Example: DELETE http://localhost:3000/todos/123

//     - For any other route not defined in the server return 404

//   Testing the server - run `npm run test-todoServer` command in terminal
//  */
  const express = require('express');
  const bodyParser = require('body-parser');
  const request = require('supertest');

  const app = express();
  const fs= require('fs');

  app.use(bodyParser.json());



  function findIndex(arr,id) {
    for(let i=0;i<arr.length;i++){
      if(arr[i].id === id) return i; 
    }
    return -1;
  }

  function removeAtIndex(arr,index){
    let newArray=[];
    for(let i=0;i<arr.length;i++){
      if (i !== index) newArray.push(arr[i]);
    }
    return newArray;
  }

  //1 retreive all todo
  app.get('/todos',(req,res)=>{
    fs.readFile("todos.json",'utf8',(err,data)=>{
      if(err) throw err;
          let file=JSON.parse(data);
          res.status(200).json(file);
    });
  });


  //2 retreive specific todo
  app.get('/todos/:id',(req,res)=>{
    
    fs.readFile("todos.json",'utf8',(err,data)=>{
      if(err) throw err;
      const todos=JSON.parse(data);
      const id1=parseInt(req.params.id);
      const todoId=findIndex(todos,id1)
      if (todoId === -1) {
        res.status(404).send('Not Found');
      } else {
        res.status(200).json(todos[todoId]);
      }
    });
  });


//3 create new todo
  app.post('/todos',(req,res)=>{
    let newTodo={
      id: Math.floor(Math.random()*1000),
      title: req.body.title,
      description: req.body.description
    };

    fs.readFile("todos.json","utf8",(err,data)=>{
      if(err) throw err;
      const todo=JSON.parse(data);
      todo.push(newTodo);
      fs.writeFile("todos.json",JSON.stringify(todo),(err)=>{
        if (err) {
          res.status(500).send('Internal Server Error');
          return;
        }
          res.status(200).json(newTodo);
      });
    });
  });


  //4 update specific todo 
  app.put("/todos/:id",(req,res)=>{
    fs.readFile("todos.json","utf8",(err,data)=>{
      if(err) throw err;
      let todo=JSON.parse(data);
      let todoId=parseInt(req.params.id);

      const indexTodo=findIndex(todo,todoId);
      if(indexTodo===-1) {res.status(404).send('Not Found');}
      else{
        const updatedTodo={
          id: todo[indexTodo].id,
          title: req.body.title,
          description: req.body.description
        };
        todo[indexTodo]=updatedTodo;

        fs.writeFile("todos.json",JSON.stringify(todo),(err)=>{
          if(err){res.status(500).send('Not found')
        return;
      }       
          res.status(200).json(updatedTodo);
        })}
    })
  });

  //5
  app.delete("/todos/:id",(req,res)=>{
    fs.readFile("todos.json",'utf8',(err,data)=>{
      if(err) throw err;

      let todos=JSON.parse(data);
      let todoId=parseInt(req.params.id)
      let todoIndex=findIndex(todos,todoId);

      if(todoIndex===-1){res.status(404).send('Not found')}
      else{
        updatedTodo=removeAtIndex(todos,todoIndex);
        fs.writeFile("todos.json",JSON.stringify(updatedTodo),(err)=>{
          if(err){res.status(500).send('Not found')}
          else{
          res.status(200).json(updatedTodo)};
        });
      }
    });
  });


app.use((req, res) => {
    res.status(404).send('Not Found');
  });

module.exports = app;




